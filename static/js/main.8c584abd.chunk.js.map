{"version":3,"sources":["logo.svg","components/Icon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","counter","setCounter","changeItem","itemNumber","toast","type","position","autoClose","hideProgressBar","Container","limit","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c584abd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { FaTimes, FaPen, FaRegCircle } from \"react-icons/fa\";\r\nimport {BsCircle, BsX} from \"react-icons/bs\"\r\nimport {GrEdit} from \"react-icons/gr\"\r\n;\r\n\r\nconst Icon = ({ name }) => {\r\n  switch (name) {\r\n    case \"O\":\r\n       return <FaRegCircle className=\"icons\" />; \r\n    {/*  return <BsCircle className=\"icons\" /> */}\r\n    case \"X\":\r\n       return <FaTimes className=\"icons\" />; \r\n     {/*  return <BsX className=\"icons\" />; */}\r\n     default:\r\n      return <FaPen className=\"icons\" />; \r\n  }\r\n};\r\n\r\nexport default Icon;\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\n\nimport Icon from \"./components/Icon\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport { Card, CardBody, Container, Button, Col, Row } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nconst itemArray = new Array(9).fill(\"empty\")\n\nconst App = () => {\n\n  const [isCross, setIsCross] = useState(true)\n  const [winMessage, setWinMessage] = useState(\"\")\n  const [counter, setCounter] = useState(0)\n\n  \n  \n\n  const reloadGame = () => {\n    setIsCross(true);\n    setWinMessage(\"\");\n    itemArray.fill(\"empty\", 0, 9);\n    setCounter(0)\n  }\n\n  const checkIsWinner = () => {\n    //  checking  winner of the game\n    if (\n      itemArray[0] === itemArray[1] &&\n      itemArray[0] === itemArray[2] &&\n      itemArray[0] !== \"empty\"\n    ) {\n      setWinMessage(`player ${itemArray[0]} won`);\n    } else if (\n      itemArray[3] !== \"empty\" &&\n      itemArray[3] === itemArray[4] &&\n      itemArray[4] === itemArray[5]\n    ) {\n      setWinMessage(`player ${itemArray[3]} won`);\n    } else if (\n      itemArray[6] !== \"empty\" &&\n      itemArray[6] === itemArray[7] &&\n      itemArray[7] === itemArray[8]\n    ) {\n      setWinMessage(`player ${itemArray[6]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[3] &&\n      itemArray[3] === itemArray[6]\n    ) {\n      setWinMessage(`player ${itemArray[0]} won`);\n    } else if (\n      itemArray[1] !== \"empty\" &&\n      itemArray[1] === itemArray[4] &&\n      itemArray[4] === itemArray[7]\n    ) {\n      setWinMessage(`player ${itemArray[1]} won`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[5] &&\n      itemArray[5] === itemArray[8]\n    ) {\n      setWinMessage(`player ${itemArray[2]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[4] &&\n      itemArray[4] === itemArray[8]\n    ) {\n      setWinMessage(`player ${itemArray[0]} won`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[4] &&\n      itemArray[4] === itemArray[6]\n    ) {\n      setWinMessage(`player ${itemArray[2]} won`);\n    }\n    else if(counter == 8){\n      setWinMessage(`Match Tie`);\n    }\n    else{\n      setCounter(counter+1)\n    }\n  };\n\n  const changeItem = (itemNumber) => {\n    if(winMessage){\n      return toast(\"Game Over\", {type: \"success\", position:\"bottom-center\", autoClose:2000, hideProgressBar:true, className:\"toastcenter\"});\n    }\n    \n    if(itemArray[itemNumber] === \"empty\") {\n      itemArray[itemNumber] = isCross ? \"X\" : \"O\"\n      setIsCross(!isCross)\n    }\n    else{\n\n      return toast(\"Invalid Selection\", {type: \"error\", position:\"bottom-center\", autoClose:2000, hideProgressBar:true, className:\"toastcenter\"})\n      \n    }\n    checkIsWinner()\n  }\n\n  return (\n    \n    <Container className=\"p-5\">\n       <ToastContainer position=\"bottom-center\" limit={1} /> \n       \n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n        {winMessage ? (\n          <div className=\"mb-2 mt-2\">\n            <h1 className= \"text-success text-uppercase text-center\">\n            {winMessage}\n            </h1>\n            <Button color=\"success\" block onClick={reloadGame}>Play again</Button>\n          </div>\n        ) : (\n          <h1 className=\"text-center text-success\">\n            {isCross ? \"X\" : \"O\"}'s turn\n          </h1>\n        )}\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card color=\"warning\" className=\"shine\"  onClick={ () => changeItem(index)}>\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}